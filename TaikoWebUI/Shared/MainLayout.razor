@inherits LayoutComponentBase
@inject HttpClient Client
@inject StateContainer StateContainer
@inject LoginService LoginService
@inject NavigationManager NavigationManager
@inject ILocalStorage LocalStorage

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
        <MudSpacer />
        @if (StateContainer.isConnected)
        {
            <MudMenu TransformOrigin=@Origin.TopRight AnchorOrigin=@Origin.BottomRight Color="Color.Inherit" Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem Icon="@Icons.Material.Filled.Person" OnClick="@((e) => EditProfile())">Game Profile</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.CreditCard" OnClick="@((e) => EditCard())">Access Codes</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.Build" OnClick="@((e) => EditPass())">Edit Password</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error" OnClick="@((e) => OnLogout())">Logout</MudMenuItem>
            </MudMenu>
        }
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">TaikoWebUI</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-8">
            @Body

            <MudScrollToTop>
                <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
            </MudScrollToTop>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    protected override async Task OnInitializedAsync()
    {
        StateContainer.OnChange += StateHasChanged;
        var user = await LocalStorage.GetStringAsync("user");
        var pass = await LocalStorage.GetStringAsync("pass");
        var saved = !string.IsNullOrEmpty(user) && !string.IsNullOrEmpty(pass);
        if (saved)
        {

            var response = await Client.GetFromJsonAsync<DashboardResponse>("api/Dashboard");
            response.ThrowIfNull();
            var loginStatus = LoginService.Login(user, pass, response);

            if (loginStatus == 1)
            {
                StateContainer.currentUser = LoginService.GetLoggedInUser();
                StateContainer.isConnected = true;
                NavigationManager.NavigateTo("/Users");
            }
            else
            {
                StateContainer.isConnected = false;
                NavigationManager.NavigateTo("/");
            }
        }
    }

    protected async Task OnLogout()
    {
        LoginService.Logout();
        StateContainer.isConnected = false;
        await LocalStorage.RemoveAsync("user");
        await LocalStorage.RemoveAsync("pass");
        NavigationManager.NavigateTo("/Users", forceLoad: true);
    }

    private void EditProfile()
    {
        NavigationManager.NavigateTo("/Users/" + StateContainer.currentUser.Baid + "/Profile");
    }

    private void EditCard()
    {
        NavigationManager.NavigateTo("/Users/"+StateContainer.currentUser.Baid+"/AccessCode");
    }

    private void EditPass()
    {
        NavigationManager.NavigateTo("/Users/ChangePassword");
    }

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

}