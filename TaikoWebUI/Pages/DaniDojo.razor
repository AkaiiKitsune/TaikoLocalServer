@inject IGameDataService GameDataService
@inject HttpClient Client

@page "/Cards/{baid:int}/DaniDojo"

<MudBreadcrumbs Items="breadcrumbs" Class="px-0"></MudBreadcrumbs>

<h1>Dani Dojo</h1>
<MudText Typo="Typo.caption">Card: @Baid</MudText>
<MudContainer>
    <MudTabs>
        @for (uint i = 1; i <= 19; i++)
        {
            var danId = i;
            var danData = GameDataService.GetDanDataById(danId);
            <MudTabPanel Text="@danData.Title">
                @foreach (var data in danData.OdaiBorderList)
                {
                    <MudText>@DanRequirementToString(data)</MudText>
                }
                @if (bestDataMap.ContainsKey(danId))
                {
                    var danBestData = bestDataMap[danId];
                    <MudText>Clear state: @danBestData.ClearState </MudText>
                    <MudText>Best Soul gauge: @danBestData.SoulGaugeTotal </MudText>
                    <MudText>Best Total Combo: @danBestData.ComboCountTotal </MudText>
                    <MudGrid>
                        @foreach (var bestStage in danBestData.DanBestStageDataList)
                        {
                            var songNumber = bestStage.SongNumber;
                            var danDataOdaiSong = danData.OdaiSongList[(int)songNumber];
                            <MudItem>
                                <MudText>Song Number: @songNumber</MudText>
                                <MudText>
                                    Song Name:
                                    @GameDataService.GetMusicNameBySongId(danDataOdaiSong.SongNo)
                                </MudText>
                                <MudText>Song Difficulty: @((Difficulty)danDataOdaiSong.Level)</MudText>
                                <MudText>
                                    Song play detail <br/>
                                    Good : @bestStage.GoodCount <br/>
                                    Ok : @bestStage.OkCount <br/>
                                    Bad : @bestStage.BadCount <br/>
                                    Combo : @bestStage.ComboCount<br/>
                                    Drumroll : @bestStage.DrumrollCount <br/>
                                    Total hit : @bestStage.TotalHitCount
                                </MudText>
                            </MudItem>
                        }
                    </MudGrid>

                }
                else
                {
                    <MudText>
                        This dan course hasn't been played
                    </MudText>
                }
            </MudTabPanel>
        }
    </MudTabs>
</MudContainer>


@code {

    [Parameter]
    public int Baid { get; set; }

    private DanBestDataResponse? response;

    private Dictionary<uint, DanBestData> bestDataMap = new();

    private readonly List<BreadcrumbItem> breadcrumbs = new()
    {
        new BreadcrumbItem("Cards", href: "/Cards"),
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        response = await Client.GetFromJsonAsync<DanBestDataResponse>($"api/DanBestData/{Baid}");
        response.ThrowIfNull();
        bestDataMap = response.DanBestDataList.ToDictionary(data => data.DanId);

        breadcrumbs.Add(new BreadcrumbItem($"Card: {Baid}", href: null, disabled: true));
        breadcrumbs.Add(new BreadcrumbItem("Dani Dojo", href: $"/Cards/{Baid}/DaniDojo", disabled: false));
    }

    private static string DanRequirementToString(DanData.OdaiBorder data)
    {
        var danConditionType = (DanConditionType)data.OdaiType;
        return (DanBorderType)data.BorderType switch
        {
            DanBorderType.All => $"{danConditionType}, Pass: {data.RedBorderTotal}, Gold: {data.GoldBorderTotal} ",
            DanBorderType.PerSong => $"{danConditionType}, " +
                                     $"Pass 1: {data.RedBorder1}, Pass 2: {data.RedBorder2}, Pass 3: {data.RedBorder3}" +
                                     $"Gold 1: {data.GoldBorder1}, Gold 2: {data.GoldBorder1}, Pass 3: {data.GoldBorder1}",
            _ => throw new ArgumentOutOfRangeException()
            };
    }
}